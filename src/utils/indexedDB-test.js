// Generated by AI - Going to change this later

const DB_NAME = 'TodoApp';
const DB_VERSION = 1;
const STORE_NAME = 'todos';

export function openDB() {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open(DB_NAME, DB_VERSION);

    request.onupgradeneeded = (event) => {
      const db = event.target.result;
      if (!db.objectStoreNames.contains(STORE_NAME)) {
        db.createObjectStore(STORE_NAME, { keyPath: 'id', autoIncrement: true });
      }
    };

    request.onsuccess = (event) => {
      resolve(event.target.result);
    };

    request.onerror = (event) => {
      reject(event.target.error);
    };
  });
}

export function getTransaction(db, mode = 'readonly') {
  const transaction = db.transaction(STORE_NAME, mode);
  const store = transaction.objectStore(STORE_NAME);
  return { transaction, store };
}

export function getAllItems(store) {
  return new Promise((resolve, reject) => {
    const request = store.getAll();

    request.onsuccess = (event) => {
      resolve(event.target.result);
    };

    request.onerror = (event) => {
      reject(event.target.error);
    };
  });
}

export function addItem(store, item) {
  return new Promise((resolve, reject) => {
    const request = store.add(item);

    request.onsuccess = () => {
      resolve();
    };

    request.onerror = (event) => {
      reject(event.target.error);
    };
  });
}

export function updateItem(store, item) {
  return new Promise((resolve, reject) => {
    const request = store.put(item);

    request.onsuccess = () => {
      resolve();
    };

    request.onerror = (event) => {
      reject(event.target.error);
    };
  });
}

export function deleteItem(store, id) {
  return new Promise((resolve, reject) => {
    const request = store.delete(id);

    request.onsuccess = () => {
      resolve();
    };

    request.onerror = (event) => {
      reject(event.target.error);
    };
  });
}

async function test() {
  const db = await openDB();
  const { store } = getTransaction(db, 'readwrite');
  var all = await getAllItems(store);
  console.log(all);
  await addItem(store, {tesT: "test"});
}